name: Publish to NPM

on:
  push:
    branches:
      - main

jobs:
  # First job: Run tests by calling the reusable test workflow
  test:
    permissions:
      contents: read  # Required to checkout code
    uses: ./.github/workflows/pr-tests.yml
  
  # Second job: Publish to NPM if tests pass and changes warrant a release
  publish:
    needs: test
    # Only run if commit message doesn't contain [skip ci]
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for provenance/trusted publishing
      contents: write  # Required to commit version bump back to repo
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to find release commits
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Collect commits and determine version bump
        id: version-bump
        run: |
          # Find the last release commit (contains "release:" prefix)
          LAST_RELEASE=$(git log --all --grep="^release:" --format="%H" -n 1 || echo "")
          
          if [ -z "$LAST_RELEASE" ]; then
            echo "No previous release commit found, checking all commits"
            COMMITS=$(git log --format="%s" origin/main)
          else
            echo "Last release commit: $LAST_RELEASE"
            COMMITS=$(git log ${LAST_RELEASE}..HEAD --format="%s")
          fi
          
          echo "Commits since last release:"
          echo "$COMMITS"
          
          # Determine version bump type based on commits
          BUMP_TYPE="skip"
          
          # Check for breaking changes (highest priority)
          if echo "$COMMITS" | grep -qE "^[a-z]+(\([a-z0-9\-]+\))?!:" || \
             echo "$COMMITS" | grep -qi "BREAKING CHANGE"; then
            BUMP_TYPE="major"
            echo "Detected BREAKING CHANGE - will bump major version"
          # Check for features
          elif echo "$COMMITS" | grep -qE "^feat(\([a-z0-9\-]+\))?:"; then
            BUMP_TYPE="minor"
            echo "Detected feature - will bump minor version"
          # Check for fixes and other changes
          elif echo "$COMMITS" | grep -qE "^(fix|perf|refactor|build|chore)(\([a-z0-9\-]+\))?:"; then
            BUMP_TYPE="patch"
            echo "Detected fix/patch - will bump patch version"
          else
            echo "No commits requiring version bump found"
          fi
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
      
      - name: Install dependencies
        if: steps.version-bump.outputs.bump_type != 'skip'
        run: npm ci
      
      - name: Build
        if: steps.version-bump.outputs.bump_type != 'skip'
        run: npm run build
      
      - name: Bump version
        if: steps.version-bump.outputs.bump_type != 'skip'
        id: bump
        run: |
          BUMP_TYPE="${{ steps.version-bump.outputs.bump_type }}"
          echo "Bumping $BUMP_TYPE version..."
          
          # Bump version without creating a git tag (we'll commit manually)
          npm version $BUMP_TYPE --no-git-tag-version
          
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Publish to NPM with provenance
        if: steps.version-bump.outputs.bump_type != 'skip'
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Commit version bump
        if: steps.version-bump.outputs.bump_type != 'skip'
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          
          # Stage the version changes
          git add package.json package-lock.json
          
          # Commit with release prefix and skip ci flag
          git commit -m "release: version $NEW_VERSION [skip ci]"
          
          # Create git tag
          git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
          
          # Push commit and tag
          git push origin main
          git push origin "v$NEW_VERSION"
